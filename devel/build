#!/bin/bash
#
# Builds the nextstrain/base and nextstrain/base-builder images with useful
# caching.
#
# Set CACHE_DATE in your environment to force layers after our custom cache
# point to be re-built. See the ARG CACHE_DATE line in the Dockerfile for more
# information.
#
set -euo pipefail

export GIT_REVISION=$(git describe --tags --abbrev=40 --always --dirty || true)

# The nextstrain/base Dockerfile is a multi-stage with both a "builder" target
# and a main target.  To enable proper caching via --cache-from we need both
# these images available to pull layers from.  This means pulling both in at
# the start and pushing both up at the end.
#
# Calling `docker run nextstrain/base` will still only pull down the small base
# image rather than pulling down the larger nextstrain/base-builder image.

platform=linux/amd64

# `buildx create` is necessary to use a driver that supports multi-platform
# images.
builder=nextstrain-builder

if ! docker buildx inspect "$builder" &>/dev/null; then
    docker buildx create --name "$builder" --driver docker-container
fi

docker buildx build \
    --builder "$builder" \
    --platform $platform \
    --build-arg CACHE_DATE \
    --build-arg GIT_REVISION \
    --cache-from nextstrain/base-builder \
    --cache-from nextstrain/base \
    --cache-to type=inline \
    --tag nextstrain/base-builder \
    --load \
    --target builder \
    .

docker buildx build \
    --builder "$builder" \
    --platform $platform \
    --build-arg CACHE_DATE \
    --build-arg GIT_REVISION \
    --cache-from nextstrain/base-builder \
    --cache-from nextstrain/base \
    --cache-to type=inline \
    --tag nextstrain/base \
    --load \
    .
