#!/bin/bash
#
# Builds the nextstrain/base and nextstrain/base-builder images with useful
# caching.
#
# By default this tags images using "latest", but you can provide a custom tag
# name.
#
# Set CACHE_DATE in your environment to force layers after our custom cache
# point to be re-built. See the ARG CACHE_DATE line in the Dockerfile for more
# information.
#
set -euo pipefail

# If the tag is not provided, default to "latest".
tag="${1:-latest}"

export GIT_REVISION=$(git describe --tags --abbrev=40 --always --dirty || true)

# The nextstrain/base Dockerfile is a multi-stage with both a "builder" target
# and a main target.  To enable proper caching via --cache-from we need both
# these images available to pull layers from.  This means pulling both in at
# the start and pushing both up at the end.
#
# Calling `docker run nextstrain/base` will still only pull down the small base
# image rather than pulling down the larger nextstrain/base-builder image.

platform=linux/amd64

# `buildx create` is necessary to use a driver that supports multi-platform
# images.
builder=nextstrain-builder

if ! docker buildx inspect "$builder" &>/dev/null; then
    # Using a persistent builder allows for faster local development.
    # However, if this is changed and it was previously run on your machine,
    # you may need to remove the builder manually before running the script:
    #     docker builder rm "nextstrain-builder"
    docker buildx create --name "$builder" --driver docker-container
fi

BASE_IMAGE="nextstrain/base"
BASE_BUILDER_IMAGE="nextstrain/base-builder"

docker buildx build \
    --builder "$builder" \
    --platform $platform \
    --build-arg CACHE_DATE \
    --build-arg GIT_REVISION \
    --cache-from $BASE_BUILDER_IMAGE:latest \
    --cache-from $BASE_BUILDER_IMAGE:$tag \
    --cache-to type=inline \
    --tag $BASE_BUILDER_IMAGE:$tag \
    --load \
    --target builder \
    .

docker buildx build \
    --builder "$builder" \
    --platform $platform \
    --build-arg CACHE_DATE \
    --build-arg GIT_REVISION \
    --cache-from $BASE_BUILDER_IMAGE:latest \
    --cache-from $BASE_BUILDER_IMAGE:$tag \
    --cache-from $BASE_IMAGE:latest \
    --cache-from $BASE_IMAGE:$tag \
    --cache-to type=inline \
    --tag $BASE_IMAGE:$tag \
    --load \
    .
